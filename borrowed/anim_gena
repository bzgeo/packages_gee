/*
Copyright (c) 2018 Gennadii Donchyts. All rights reserved.

This work is licensed under the terms of the MIT license.  
For a copy, see <https://opensource.org/licenses/MIT>.
*/

// var animation = require('users/servirbz/packages:borrowed/anim_gena');

////

var utils = require('users/gena/packages:utils');

////

function pad(n, width, z) {
  z = z || '0';
  n = n + '';
  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}

var timeout = null
var play = false

function addAnimationControls(layers, opacity, position, timeStep, width, labelProperty, compact) {
  var currentIndex = 0
  
  layers.map(function(l) { 
    l.setOpacity(0) 
  })
  
  var showLayer = function(index) {
    layers[currentIndex].setOpacity(0)
    
    var l = layers[index]
    
    l.setOpacity(opacity)
    
    currentIndex = index

    // update visibility if needed
    var shown = l.getShown()
    if(!shown) {
      l.setShown(true) 
    }
    
    label.setValue(layers[index].getName())
  };

  var label = ui.Label('');
  
  function onHideLayers() {
    layers.map(function(l) {
      l.setShown(false)
    })
  }

  function onTranparentLayers() {
    layers.map(function(l) {
      l.setOpacity(0)
    })
  }

  function nextFrame() { 
    var index = currentIndex + 1
    if(index >= layers.length) {
      index = 0
    }

    slider.setValue(index)
    
    if(play) {
      ui.util.setTimeout(nextFrame, timeStep)
    }
  }

  function onPlayPause() {
    if(!play && !timeout) {
      timeout = ui.util.setTimeout(nextFrame, timeStep)
      play = true
      buttonPlayPause.setLabel(textPause)
    } else {
      ui.util.clearTimeout(timeout)
      timeout = null
      play = false
      buttonPlayPause.setLabel(textPlay)
    }
  }
  
  var textPlay = '▶'
  var textPause = '⏸'
  
  var buttonPlayPause = ui.Button(textPlay, onPlayPause)
  
  var buttonHideLayers = ui.Button('Hide', onHideLayers)
  var buttonTransparentLayers = ui.Button('Transparent', onTranparentLayers)

  var slider = ui.Slider({
    min: 0,
    max: layers.length - 1,
    step: 1,
    style: {stretch: 'horizontal'}
  });

  slider.onSlide(showLayer)
  
  var sliderOpacity = ui.Slider({
    min:0, max: 1, step: 0.1
  })
  
  sliderOpacity.onSlide(function(o) {
    layers[currentIndex].setOpacity(o)
    opacity = o
  })
  
  sliderOpacity.setValue(opacity)

  //var widgets = [slider, label, buttonPlayPause, buttonHideLayers, sliderOpacity]
  var widgets = [slider, label, buttonPlayPause, sliderOpacity]

  if(compact) {
    widgets = [buttonPlayPause, slider, label]
  }
  
  // Create a panel that contains both the slider and the label.
  var panel = ui.Panel({
    widgets: widgets,
    layout: ui.Panel.Layout.flow('horizontal'),
    style: {
      position: position,
      padding: '5px',
      width: width
    }
  });
  
  Map.add(panel)

  layers[0].setOpacity(1)
  
  // loop
  function delay(millis, callback) {
    var before = Date.now();
    
    function loop() {
      ee.Number(Date.now()).evaluate(function(now) { 
        if(now < before + millis) {
          loop()
        } else {
          callback()
        }
      })
    }
    
    loop()
  }
  
  function setTimeout(interval, action) {
    delay(interval, function() {
      action()
      
      setTimeout(interval, action)
    }) 
  }
    
  // this never stops, even after Reset 
  /*
  setTimeout(100, function() { 
    var index = currentIndex + 1
    if(index >= layers.length) {
      index = 0
    }
    showLayer(index) 
  })
  */
  
  // update layer names (async)
  if(labelProperty) {
    layers.map(function(layer) {
      var image = ee.Image(layer.getEeObject())
      
      image.get(labelProperty).evaluate(function(s) {
        layer.setName(s)
      
        if(layer.getShown()) { // TODO: make it more robust, e.g. index is !== 0
          label.setValue(s)
        }
      })
    })
  }

  return panel
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/***
 * Animates a maxImageCount images from a given image collection, adds them as layers so that GMap caching can be used
 */
function animate(images, options) {
  var maxFrames = (options && options.maxFrames) || 150
  var width = (options && options.width) || '450px'
  var labelProperty = (options && options.label) || null
  var compact = (options && options.compact) || false
  var vis = (options && options.vis) || {}
  var opacity = (options && options.opacity) || 1.0
  var position = (options && options.position) || 'top-center'
  var prefix = (options && options.prefix) || ''
  var timeStep = (options && options.timeStep) || 600

  var preload = true
  
  if(options && options.preload != 'undefined') {
    preload = options.preload
  }
  
  images = ee.ImageCollection(images).toList(maxFrames, 0)

  maxFrames = images.size().min(maxFrames)
  
  // add loading panel
  var label = ui.Label('Loading images, please wait ....');
  var panel = ui.Panel({
    widgets: [label],
    layout: ui.Panel.Layout.flow('horizontal'),
    style: {
      position: position,
      padding: '5px',
      width: width
    }
  });
  Map.widgets().add(panel)

  // chaining
  var s = this

  s.panel = panel

  s.then = function(callback) { 
    s.callback = callback

    return s
  }

  var lodingPanel = panel
  
  ee.List.sequence(0, maxFrames.subtract(1)).evaluate(function(indices) {
    var layers = []

    indices.map(function(i) {
      var image = ee.Image(images.get(i))
      var name = prefix + ' ' + pad(i, 2)
      
      if(options && options.clipArea) {
        image = image.clip(options.clipArea)
      }

      var visible = preload

      if(options && options.preloadCount && i > options.preloadCount) {
        visible = false
      }

      var layer = ui.Map.Layer(image, vis, name, visible)
      Map.layers().add(layer)
      layers.push(layer)
    })
    
    // remove loading panel
    Map.widgets().remove(lodingPanel)

    if(s.callback) {
      s.callback()
    }

    var panel = addAnimationControls(layers, opacity, position, timeStep, width, labelProperty, compact)    

    // replace panel
    s.panel = panel
  })

  return s
}

exports.animate = animate

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


function animate_(images, options) {
  var maxFrames = (options && options.maxFrames) || 150
  var width = (options && options.width) || '450px'
  var labelProperty = (options && options.label) || null
  var compact = (options && options.compact) || false
  var vis = (options && options.vis) || {}
  var opacity = (options && options.opacity) || 0.6
  var position = (options && options.position) || 'top-center'
  var prefix = (options && options.prefix) || ''
  var timeStep = (options && options.timeStep) || 600

  var preload = true
  
  if(options && options.preload != 'undefined') {
    preload = options.preload
  }
  
  images = ee.ImageCollection(images).toList(maxFrames, 0)

  maxFrames = images.size().min(maxFrames)
  
  // add loading panel
  var label = ui.Label('Loading images, please wait ....');
  var panel = ui.Panel({
    widgets: [label],
    layout: ui.Panel.Layout.flow('horizontal'),
    style: {
      position: position,
      padding: '5px',
      width: width
    }
  });
  Map.widgets().add(panel)

  // chaining
  var s = this

  s.panel = panel

  s.then = function(callback) { 
    s.callback = callback

    return s
  }

  var lodingPanel = panel
  
  ee.List.sequence(0, maxFrames.subtract(1)).evaluate(function(indices) {
    var layers = []

    indices.map(function(i) {
      var image = ee.Image(images.get(i))
      var name = prefix + ' ' + pad(i, 2)
      
      if(options && options.clipArea) {
        image = image.clip(options.clipArea)
      }

      var visible = preload

      if(options && options.preloadCount && i > options.preloadCount) {
        visible = false
      }

      var layer = ui.Map.Layer(image, vis, name, visible)
      Map.layers().add(layer)
      layers.push(layer)
    })
    
    // remove loading panel
    Map.widgets().remove(lodingPanel)

    if(s.callback) {
      s.callback()
    }

    var panel = addAnimationControls(layers, opacity, position, timeStep, width, labelProperty, compact)    

    // replace panel
    s.panel = panel
  })

  return s
}

exports.animate_ = animate_

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////